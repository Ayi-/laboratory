# -*- coding:utf-8 -*-
"""
Django settings for IOTplatform project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from __future__ import absolute_import
import os
from app.permissions import IsAdminOrReadOnly

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

from django.conf import settings
from django.conf.urls.static import static

from os import environ

from datetime import timedelta
from celery.schedules import crontab
debug = not environ.get("APP_NAME", "")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_!#%pvc2%0r8et8!4ua4&*m(6wg1yc8hbxygz30!+go)hv0-ca'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'app',
    'django_jinja',
    'rest_framework',
)

# AllowAny
# IsAuthenticated
# IsAdminUser
# IsAuthenticatedOrReadOnly
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),
    #'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),  # 不使用浏览器模式
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'PAGINATE_BY':10,
    'PAGINATE_BY_PARAM': 'page_size',
    'MAX_PAGINATE_BY': 100
}

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'IOTplatform.urls'

TEMPLATES = [
    # {
    #     "BACKEND": "django.template.backends.jinja2.Jinja2",
    #     'DIRS': [
    #         'app/templates',
    #     ],
    #     "APP_DIRS": True,
    #     "OPTIONS":{
    #         "autoescape": True,
    #     "auto_reload": settings.DEBUG,
    #     },
    #
    # },
    {
        "BACKEND": "django_jinja.backend.Jinja2",
        'DIRS': [
            os.path.join(BASE_DIR, 'app/jinja2'),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            # Match the template names ending in .html but not the ones in the admin folder.
            "match_extension": ".html",
            # "match_regex": r"^(?!admin/).*",
            "app_dirname": os.path.join(BASE_DIR, 'app'),

            # Can be set to "jinja2.Undefined" or any other subclass.
            "undefined": None,

            "newstyle_gettext": True,

            "extensions": [
                "jinja2.ext.do",
                "jinja2.ext.loopcontrols",
                "jinja2.ext.with_",
                "jinja2.ext.i18n",
                "jinja2.ext.autoescape",
                "django_jinja.builtins.extensions.CsrfExtension",
                "django_jinja.builtins.extensions.CacheExtension",
                "django_jinja.builtins.extensions.TimezoneExtension",
                "django_jinja.builtins.extensions.UrlsExtension",
                "django_jinja.builtins.extensions.StaticFilesExtension",
                "django_jinja.builtins.extensions.DjangoFiltersExtension",
            ],
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
            "autoescape": True,
            "auto_reload": settings.DEBUG,
            "translation_engine": "django.utils.translation",
        }
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },

]

WSGI_APPLICATION = 'IOTplatform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases


if debug:
    MYSQL_DB = 'iotplatform'
    MYSQL_USER = 'root'
    MYSQL_PASS = '0000'
    MYSQL_HOST_M = '192.168.56.1'
    MYSQL_HOST_S = '192.168.56.1'
    MYSQL_PORT = '3306'
else:
    MYSQL_DB = 'iotplatform'
    MYSQL_USER = 'root'
    MYSQL_PASS = '0000'
    MYSQL_HOST_M = '127.0.0.1'
    MYSQL_HOST_S = '127.0.0.1'
    MYSQL_PORT = '3306'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MYSQL_DB,
        'USER': MYSQL_USER,
        'PASSWORD': MYSQL_PASS,
        'HOST': MYSQL_HOST_M,
        'PORT': MYSQL_PORT,

    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'  #
# TIME_ZONE = 'Etc/GMT+8'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True

USE_L10N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
# TEMPLATE_DIRS = (
#     os.path.join(BASE_DIR, 'templates'),
# )

# set for the @login_required
LOGIN_URL = '/login/'
AUTHENTICATION_BACKENDS = (
    'app.models.MyCustomBackend',
    'django.contrib.auth.backends.ModelBackend',
)

## Broker settings.
BROKER_URL ='redis://localhost:6379/0'

# List of modules to import when celery starts.
CELERY_IMPORTS = ('app.tasks', )
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# timedelta(seconds=30),定时30秒

# CELERYBEAT_SCHEDULE  = {
#     'add-every-time': {
#         'task': 'app.tasks.add',
#         'schedule': crontab(minute=0,hour='*'),
#         'args': (16, 16)
#     },
# }


CELERY_TASK_RESULT_EXPIRES = 1200 # celery任务执行结果的超时时间，我的任务都不需要返回结果,只需要正确执行就行
CELERYD_CONCURRENCY = 2 # celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以
CELERYD_PREFETCH_MULTIPLIER = 2 # celery worker 每次去redies取任务的数量，我这里预取了4个慢慢执行,因为任务有长有短没有预取太多
CELERYD_MAX_TASKS_PER_CHILD = 40 # 每个worker执行了多少任务就会死掉，我建议数量可以大一些，比如200
CELERYD_TASK_TIME_LIMIT = 1800 # 任务超时时间

# CELERY_DEFAULT_QUEUE = "default_dongwm" # 默认的队列，如果一个消息不符合其他的队列就会放在默认队列里面
#
# CELERY_QUEUES = {
#     "default_dongwm": { # 这是上面指定的默认队列
#         "exchange": "default_dongwm",
#         "exchange_type": "direct",
#         "routing_key": "default_dongwm"
#     },
#     "topicqueue": { # 这是一个topic队列 凡是topictest开头的routing key都会被放到这个队列
#         "routing_key": "topictest.#",
#         "exchange": "topic_exchange",
#         "exchange_type": "topic",
#     },
#     "test2": { # test和test2是2个fanout队列,注意他们的exchange相同
#         "exchange": "broadcast_tasks",
#         "exchange_type": "fanout",
#         "binding_key": "broadcast_tasks",
#     },
#     "test": {
#         "exchange": "broadcast_tasks",
#         "exchange_type": "fanout",
#         "binding_key": "broadcast_tasks2",
#     },
# }
# class MyRouter(object):
#
#     def route_for_task(self, task, args=None, kwargs=None):
#
#         if task.startswith('topictest'):
#             return {
#                 'queue': 'topicqueue',
#             }
#         # 我的dongwm.tasks文件里面有2个任务都是test开头
#         elif task.startswith('dongwm.tasks.test'):
#             return {
#                 "exchange": "broadcast_tasks",
#             }
#         # 剩下的其实就会被放到默认队列
#         else:
#             return None
#
# # CELERY_ROUTES本来也可以用一个大的含有多个字典的字典,但是不如直接对它做一个名称统配
# CELERY_ROUTES = (MyRouter(), )


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(levelname)s]- %(message)s'
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/app/' + STATIC_URL + '/logs/', 'all.log'),
            'maxBytes': 1024 * 1024 * 1,  # 1 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR + '/app/' + STATIC_URL + '/logs/', 'request_handler.log'),
            # 'maxBytes': 1024*1024*5, # 1 MB
            'formatter': 'standard',
        },
        'db_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/app/' + STATIC_URL + '/logs/', 'db.log'),
            'maxBytes': 1024 * 1024 * 1,  # 5 MB

            'formatter': 'standard',
        },
        'scprits_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/app/' + STATIC_URL + '/logs/', 'script.log'),
            'maxBytes': 1024 * 1024 * 1,  # 5 MB
            'formatter': 'standard',
        },
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['default'],
        #     'level': 'DEBUG',
        #     'propagate': False
        # },
        'IOTplatform.app': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['db_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
        # 'django_datatables_view.base_datatable_view': {
        #     'handlers': ['scprits_handler'],
        #     'level': 'DEBUG',
        #     'propagate': False
        # },
    }
}
